services:
  db:
    container_name: db
    image: postgres:14
    env_file:
      - ./backend/.env
    volumes:
      - pgdata:/var/lib/postgresql/data
      # - ./backend/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    ports:
      - "5432:5432"
    networks:
      - finance-network
    # command: ["env"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pogchan -d efiterminal -h db"]
      interval: 5s
      retries: 5
      timeout: 5s
    restart: always

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    environment:
      - ENVIRONMENT=development  # Toggle between production and development
    depends_on:
      db:
        condition: service_healthy
    networks:
      - finance-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3010:3010"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - ./frontend/.env
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - finance-network
  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   ports:
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/certs:/etc/nginx/certs
  #   depends_on:
  #     frontend:
  #       condition: service_healthy
  #     backend:
  #       condition: service_healthy
  #   networks:
  #     - finance-network

volumes:
  pgdata: {}

networks:
  finance-network:
    driver: bridge
